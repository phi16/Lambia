Pre{
  Bool {
    True = \xy.x
    False = \xy.y
    And = \pqxy.p (q x y) y
    Or = \pqxy.p x (q x y)
    Not = \pxy.p y x
    If = \pte.p t e
  }
  Pair {
    Pair = \xyp.p x y
    First = \p.p True
    Second = \p.p False
    Swap = \p.Pair (Second p) (First p)
  }
  Func {
    Id = \x.x
    Const = \xy.x
    Compose = \fgx.f (g x)
    Iterate = \nfx.n f x
    Fix = \f.(\x.f x x) (\x.f x x)
    Flip = \fxy.f y x
    App = \xf.f x
  } 
  Nat {
    0 = False
    Succ = \nxy.x (n x y) 
    1 = Succ 0
    Add = \mnxy.n x (m x y)
    Mul = \mnxy.n (m x) y
    Pow = \mnxy.n m x y
    Zero = \n.n (\x.False) True

    Pred = \nfx.n (\gh.h (g f)) (\u.x) (\u.u)
    Sub = \mn.n Pred m
  }
  List {
    Cons = Pair
    Nil = False
    Head = First
    Tail = Second
    Null = \l.l (\xye.False) True
    Index = \nl.Head (Iterate n Tail l)
    Map = Fix (\mfl.If (Null l) Nil (Cons (f (Head l)) (m f (Tail l))))
    Fold = Fix (\hfel.If (Null l) e (f (Head l) (h f e (Tail l))))
    Nats = Fix (\n.Cons 0 (Map Succ n))
    Length = Fix (\fl.If (Null l) 0 (Succ (f (Tail l))))
  }
}

