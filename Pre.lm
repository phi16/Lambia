Pre {
  open Func {
    Id = \x.x
    Const = \xy.x
    Compose = \fgx.f (g x)
    Fix = \f.(\x.f (x x)) (\x.f (x x))
    Flip = \fxy.f y x
    App = \fx.f x
    Give = \xf.f x
    ` = \afbc.f a b
  }
  Combinator {
    I = \x.x
    K = \xy.x
    S = \xyz.x z (y z)
    B = \xyz.x (y z)
    C = \xyz.x z y
    W = \xy.x y y
    X = \x.x S K
    Y = \f.(\x.f (x x)) (\x.f (x x))
    open Primitive.Combinator
  }
  open Bool {
    True = \xy.x
    False = \xy.y
    And = \pq.p q False
    Or = \pq.p True q
    Not = \pxy.p y x
    Xor = \pq.p (Not q) q
    Eqv = \pq.p q (Not q)
    If = \pte.p t e
  }
  open Pair {
    Pair = \xyp.p x y
    Fst = \p.p (\xy.x)
    Snd = \p.p (\xy.y)

    Swap = \px.p (\ab.x b a)
    Curry = \fxy.f (Pair x y)
    Uncurry = \fp.f (Fst p) (Snd p)
    First = \fpd.d (f (Fst p)) (Snd p)
    Second = \fpd.d (Fst p) (f (Snd p))
  }
  open Either {
    Left = \xfg.f x
    Right = \xfg.g x
    Either = \fgp.p f g

    Which = \p.p (\x.False) (\x.True)
  }
  open Maybe {
    Nothing = \fe.e
    Just = \xfe.f x
    Maybe = \fep.p f e

    Exist = \p.p False (\x.True)
  }
  open Nat {
    0 = \xy.y
    Succ = \nxy.x (n x y)
    Iterate = \nfx.n f x

    Add = \mnxy.n x (m x y)
    Mul = \mnx.n (m x)
    Pow = \mn.n m
    Zero = \n.n (\x.False) True

    Pred = \nfx.n (\gh.h (g f)) (\u.x) (\u.u)
    Sub = \mn.n Pred m
    Div = \pq.Fix (\dxy.{
      u = Sub x y
    } If (Zero u) 0 (Succ (d u y))) (Succ p) q
    Mod = \pq.Pred (Fix (\mxy.{
      u = Sub x y
    } If (Zero u) x (m u y)) (Succ p) q)

    Le = \mn.Zero (Sub m n)
    Lt = \mn.Zero (Sub (Succ m) n)
    Ge = \mn.Zero (Sub n m)
    Gt = \mn.Zero (Sub (Succ n) m)
    Eq = \mn.And (Le m n) (Ge m n)

    open Primitive.Nat
    1 = Succ 0
    2 = Succ 1
    3 = Succ 2
    4 = Succ 3
    5 = Succ 4
    6 = Succ 5
    7 = Succ 6
  }
  Int {
    FromNat = \n.Pair n 0
    O = FromNat 0
    Normalize = \n.{
      f = Fst n
      s = Snd n
    } If (Ge f s) (Pair (Sub f s) 0) (Pair 0 (Sub s f))
    ToNat = \n.Fst (Normalize n)
    Abs = \n.Uncurry Add (Normalize n)
    Pos = \n.Gt (Fst n) (Snd n)
    Neg = \n.Lt (Fst n) (Snd n)
    Z = \n.Eq (Fst n) (Snd n)
    Negate = Swap

    Plus = \mn.Pair (Add (Fst m) (Fst n)) (Add (Snd m) (Snd n))
    Minus = \mn.Pair (Add (Fst m) (Snd n)) (Add (Snd m) (Fst n))
    Mult = \mn.{
      a = Fst m
      b = Snd m
      c = Fst n
      d = Snd n
    } Pair (Add (Mul a c) (Mul b d)) (Add (Mul a d) (Mul b c))
    Divide = \xy.{
      D = \mn.{
        d = FromNat (Div (Abs m) (Abs n))
        e = Eqv (Pos m) (Pos n)
      } If e d (Negate d)
    } D (Normalize x) (Normalize y)

    open Primitive.Int
  }
  open List {
    Left {
      Cons = \xsfe.f x (s f e)
      Snoc = \xsfe.s f (f x e)
      Nil = \fe.e
      Head = \s.s (\xy.x) False
      Tail = \scn.s (\htg.g h (t c)) (\t.n) (\ht.t)
      Null = \l.l (\xy.False) True
      Fold = \fes.s f e
    }
    Right {
      Cons = Pair
      Nil = \xy.y
      Head = Fst
      Tail = Snd
      Null = \l.l (\xye.False) True
      Fold = Fix (\hfel.If (Null l) e (f (Head l) (h f e (Tail l))))
    }
    open Left

    Unfold = Fix (\ufe.{
      d = f e
    } Second (u f) d)
    Append = \ab.Fold Cons b a
    Index = \nl.Head (Iterate n Tail l)
    Map = \f.Fold (\pq.Cons (f p) q) Nil
    Nats = Fix (\n.Cons 0 (Map Succ n))
    Length = Fold (Const Succ) 0
    Zip = Fix (\zfab.If (Or (Null a) (Null b)) Nil ({
      h = f (Head a) (Head b)
      t = z f (Tail a) (Tail b)
    } Cons h t))
    Take = Fix (\tnl.If (Or (Zero n) (Null l)) Nil (Cons (Head l) (t (Pred n) (Tail l))))
    Drop = Fix (\tnl.If (Or (Zero n) (Null l)) l (t (Pred n) (Tail l)))
    Split = Fix (\snl.If (Or (Zero n) (Null l)) (Pair Nil l) ({
      r = s (Pred n) (Tail l)
    } Pair (Cons (Head l) (Fst r)) (Snd r)))
    Filter = \f.Fold (\pq.(If (f p) (Cons p) Id) q) Nil
    Partition = \f.{
      pred = \pq.(If (f p) First Second) (Cons p) q
    } Fold pred (Pair Nil Nil)
    Sort = Fix (\sl.If (Null l) Nil ({
      h = Head l
      t = Tail l
      u = Partition (Ge h) t
      la = s (Fst u)
      ra = Cons h (s (Snd u))
    } If (Null t) (Cons h Nil) (Append la ra)))

    Sum = Fold Add 0
    Product = Fold Mul 1
    All = Fold And True
    Any = Fold Or False
    Forall = \f.Fold (\xe.And e (f x)) True
    Exists = \f.Fold (\xe.Or e (f x)) False

    [ = \ec.c (Left.Cons e Left.Nil)
    , = \lec.c (Left.Snoc e l)
    ] = \lc.c l
    AsList = \l.l Cons Nil
    AsFold = \l.l
  }
  Binary {
    B = Nil
    I = \p.Cons True p
    O = \p.Cons False p
    End = Null
    Digit = Length
    Bit {
      And = Zip And
      Or = Zip Or
      Not = \b.Map Not b
      Xor = Zip Xor
    }
    Nat = {
      c = \xy.Add (Mul 2 y) (If x 1 0)
    } Fold c 0
  }
  Integer {
    open Primitive.Integer
  }
  Char {
    open Primitive.Char
  }
  Decimal {
    open Primitive.Decimal
  }
  open IO {
    open Primitive.IO
  }
  Verify {
    Fact = Fix (\fn.If (Zero n) 1 (Mul n (f (Pred n))))

    N0 = Eq 3 (Add 2 1)
    N1 = Eq 6 (Mul (Sub 3 1) (Mod 7 4))
    N2 = Eq 6 (Fact 3)
    N3 = Eq 7 (Add (Mul (Div 7 3) 3) (Mod 7 3))
    N4 = Eq 6 ([1,2,3] AsFold Add False)
    N5 = Forall (Le 0) (Take 5 Nats)
    N6 = Eq (`2 Mul 5`) (` (`3 Mul 3`) Add 1`)
    N = [N0,N1,N2,N3,N4,N5,N6] AsFold And True

    l = [3,2,5,1,4] AsList
    L0 = Eq 5 (Length l)
    L1 = Eq (Mul 3 5) (Fold Add 0 l)
    L2 = All (Zip Eq (Take 5 (Tail Nats)) (Sort l))
    L = [L0,L1,L2] AsFold And True

    open Binary
    B0 = Eq (Mul 3 3) (Nat ([I,O,O,I] AsFold App B))
    B = [B0] AsFold And True

    Verified = [N,L,B] AsFold And True
  }
}
Pre.Verify.Verified
